<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule created="" id="c0a86602920d1a5a81920d7dd2060010" language="beanshell" modified="" name="IAM-DEMO-WSBefore-TestConnection" type="WebServiceBeforeOperationRule">
  <Description>The Web Services connector will call this rule before performing ANY defined operation. This rule can be used to add/update values in the endpoint object before performing the operation and/or add persistent values to the application's data.
(See information about what to return for more information)</Description>
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" id="c0a801fe921011358192108dcdf50076" name="Reference Library"/>
  </ReferencedRules>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>The application associated with the operation being processed.</Description>
      </Argument>
      <Argument name="requestEndPoint">
        <Description>The current request information containing the header, body, context url, method type, response attribute map, 
                and response code. This object can be modified directly and returned by the rule to update the endpoint information that is
                used by the current operation.
                </Description>
      </Argument>
      <Argument name="oldResponseMap">
        <Description>Earlier response object </Description>
      </Argument>
      <Argument name="restClient">
        <Description>REST Client Object</Description>
      </Argument>
      <Argument name="provisioningPlan">
        <Description>A ProvisioningPlan object containing the payload of the http request. A provisioning plan has an account request which defines the operation to be performed on the account.
                 An account request can contain multiple attribute requests and each attribute request represents an operation on a single account attribute.
                </Description>
      </Argument>
      <Argument name="partition">
        <Description>If applicable, a Partition object with the current aggregation's partitioning information.
                </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Map">
        <Description>An updated or unmodified 'requestEndPoint' object. If application object modifications are desired, create a map containing keys 'updatedEndPoint' and 'connectorStateMap' and use it as the return value;
                Within the new map, the 'updatedEndPoint' can be set to an updated or unmodified 'requestEndPoint' object. The 'connectorStateMap' will be saved as persistent values in the application definition.
                </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>obj = new Object() {
  public String firstName = "John", lastName = "Doe";
  public String fullName() {
    return firstName + " " + lastName;
  }
  public String doSomething(String something) {
    return something;
  }
  public String doSomething(String language, String something) {
    return something;
  }
};

ref = new Reference(obj);
System.out.println("---");
System.out.println(obj);

System.out.println(ref.getClass());
System.out.println(ref.getValue("firstName"));
System.out.println(ref.getValue("lastName"));

ref.setValue("lastName", "Cena");
System.out.println(ref.invoke("fullName"));

for(methodDefine: ref.methodDefines("fullName"))
  System.out.println(methodDefine);

for(methodDefine: ref.methodDefines("doSomething"))
  System.out.println(methodDefine);

methods = ref.getMethods("doSomething");
for(method: methods)
  System.out.println(method);

System.out.println(ref.invoke("doSomething", new String[] {"Hello world"}));
System.out.println(ref.invoke("doSomething", new String[] {"eng", "Hello world"}));

return requestEndPoint;</Source>
</Rule>
